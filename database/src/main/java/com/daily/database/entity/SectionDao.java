package com.daily.database.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SECTION".
*/
public class SectionDao extends AbstractDao<Section, String> {

    public static final String TABLENAME = "SECTION";

    /**
     * Properties of entity Section.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SectionGUID = new Property(0, String.class, "sectionGUID", true, "SECTION_GUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PicturePath = new Property(2, String.class, "picturePath", false, "PICTURE_PATH");
    }


    public SectionDao(DaoConfig config) {
        super(config);
    }
    
    public SectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SECTION\" (" + //
                "\"SECTION_GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: sectionGUID
                "\"NAME\" TEXT," + // 1: name
                "\"PICTURE_PATH\" TEXT);"); // 2: picturePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Section entity) {
        stmt.clearBindings();
 
        String sectionGUID = entity.getSectionGUID();
        if (sectionGUID != null) {
            stmt.bindString(1, sectionGUID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(3, picturePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Section entity) {
        stmt.clearBindings();
 
        String sectionGUID = entity.getSectionGUID();
        if (sectionGUID != null) {
            stmt.bindString(1, sectionGUID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(3, picturePath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Section readEntity(Cursor cursor, int offset) {
        Section entity = new Section( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sectionGUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // picturePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Section entity, int offset) {
        entity.setSectionGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicturePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Section entity, long rowId) {
        return entity.getSectionGUID();
    }
    
    @Override
    public String getKey(Section entity) {
        if(entity != null) {
            return entity.getSectionGUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Section entity) {
        return entity.getSectionGUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
