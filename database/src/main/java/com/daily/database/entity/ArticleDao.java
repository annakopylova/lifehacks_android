package com.daily.database.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, String> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ArticleGUID = new Property(0, String.class, "articleGUID", true, "ARTICLE_GUID");
        public final static Property SectionGUID = new Property(1, String.class, "sectionGUID", false, "SECTION_GUID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property PicturePath = new Property(4, String.class, "picturePath", false, "PICTURE_PATH");
        public final static Property Liked = new Property(5, boolean.class, "liked", false, "LIKED");
        public final static Property UserName = new Property(6, String.class, "userName", false, "USER_NAME");
        public final static Property Saved = new Property(7, boolean.class, "saved", false, "SAVED");
        public final static Property Creation_date = new Property(8, Long.class, "creation_date", false, "CREATION_DATE");
        public final static Property LikeCount = new Property(9, Long.class, "likeCount", false, "LIKE_COUNT");
    }


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"ARTICLE_GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: articleGUID
                "\"SECTION_GUID\" TEXT," + // 1: sectionGUID
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"PICTURE_PATH\" TEXT," + // 4: picturePath
                "\"LIKED\" INTEGER NOT NULL ," + // 5: liked
                "\"USER_NAME\" TEXT," + // 6: userName
                "\"SAVED\" INTEGER NOT NULL ," + // 7: saved
                "\"CREATION_DATE\" INTEGER," + // 8: creation_date
                "\"LIKE_COUNT\" INTEGER);"); // 9: likeCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String articleGUID = entity.getArticleGUID();
        if (articleGUID != null) {
            stmt.bindString(1, articleGUID);
        }
 
        String sectionGUID = entity.getSectionGUID();
        if (sectionGUID != null) {
            stmt.bindString(2, sectionGUID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(5, picturePath);
        }
        stmt.bindLong(6, entity.getLiked() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
        stmt.bindLong(8, entity.getSaved() ? 1L: 0L);
 
        Long creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindLong(9, creation_date);
        }
 
        Long likeCount = entity.getLikeCount();
        if (likeCount != null) {
            stmt.bindLong(10, likeCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        String articleGUID = entity.getArticleGUID();
        if (articleGUID != null) {
            stmt.bindString(1, articleGUID);
        }
 
        String sectionGUID = entity.getSectionGUID();
        if (sectionGUID != null) {
            stmt.bindString(2, sectionGUID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(5, picturePath);
        }
        stmt.bindLong(6, entity.getLiked() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
        stmt.bindLong(8, entity.getSaved() ? 1L: 0L);
 
        Long creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindLong(9, creation_date);
        }
 
        Long likeCount = entity.getLikeCount();
        if (likeCount != null) {
            stmt.bindLong(10, likeCount);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // articleGUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sectionGUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picturePath
            cursor.getShort(offset + 5) != 0, // liked
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.getShort(offset + 7) != 0, // saved
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // creation_date
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // likeCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setArticleGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSectionGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicturePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLiked(cursor.getShort(offset + 5) != 0);
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSaved(cursor.getShort(offset + 7) != 0);
        entity.setCreation_date(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setLikeCount(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Article entity, long rowId) {
        return entity.getArticleGUID();
    }
    
    @Override
    public String getKey(Article entity) {
        if(entity != null) {
            return entity.getArticleGUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getArticleGUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
